{"ast":null,"code":"export const fakeApi = {\n  login: async ({\n    email,\n    password\n  }) => {\n    if (email === 'test@example.com' && password === '1234') {\n      return {\n        token: 'fake-jwt-token',\n        user: {\n          email\n        }\n      };\n    } else {\n      throw new Error('Неверный логин или пароль');\n    }\n  },\n  getTrainData: async () => {\n    return [{\n      number: '045А',\n      from: 'Рузаевка',\n      to: 'Москва',\n      seats: [{\n        number: 1,\n        isUpper: false,\n        isSide: false,\n        bookedSegments: ['Рузаевка → Пенза']\n      }, {\n        number: 2,\n        isUpper: true,\n        isSide: false,\n        bookedSegments: []\n      }, {\n        number: 3,\n        isUpper: false,\n        isSide: false,\n        bookedSegments: []\n      }, {\n        number: 4,\n        isUpper: true,\n        isSide: false,\n        bookedSegments: ['Пенза → Москва']\n      }, {\n        number: 21,\n        isUpper: false,\n        isSide: true,\n        bookedSegments: []\n      }, {\n        number: 22,\n        isUpper: true,\n        isSide: true,\n        bookedSegments: ['Рузаевка → Пенза', 'Пенза → Москва']\n      }, {\n        number: 23,\n        isUpper: false,\n        isSide: true,\n        bookedSegments: []\n      }, {\n        number: 24,\n        isUpper: true,\n        isSide: true,\n        bookedSegments: []\n      }]\n    }];\n  }\n};","map":{"version":3,"names":["fakeApi","login","email","password","token","user","Error","getTrainData","number","from","to","seats","isUpper","isSide","bookedSegments"],"sources":["C:/Users/pomak/react-info/src/api/api.js"],"sourcesContent":["export const fakeApi = {\r\n  login: async ({ email, password }) => {\r\n    if (email === 'test@example.com' && password === '1234') {\r\n      return { token: 'fake-jwt-token', user: { email } };\r\n    } else {\r\n      throw new Error('Неверный логин или пароль');\r\n    }\r\n  },\r\n\r\n  getTrainData: async () => {\r\n  return [\r\n    {\r\n      number: '045А',\r\n      from: 'Рузаевка',\r\n      to: 'Москва',\r\n      seats: [\r\n        { number: 1, isUpper: false, isSide: false, bookedSegments: ['Рузаевка → Пенза'] },\r\n        { number: 2, isUpper: true, isSide: false, bookedSegments: [] },\r\n        { number: 3, isUpper: false, isSide: false, bookedSegments: [] },\r\n        { number: 4, isUpper: true, isSide: false, bookedSegments: ['Пенза → Москва'] },\r\n        { number: 21, isUpper: false, isSide: true, bookedSegments: [] },\r\n        { number: 22, isUpper: true, isSide: true, bookedSegments: ['Рузаевка → Пенза', 'Пенза → Москва'] },\r\n        { number: 23, isUpper: false, isSide: true, bookedSegments: [] },\r\n        { number: 24, isUpper: true, isSide: true, bookedSegments: [] }\r\n      ]\r\n    }\r\n  ];\r\n}\r\n\r\n\r\n\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAO;IAAEC,KAAK;IAAEC;EAAS,CAAC,KAAK;IACpC,IAAID,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,MAAM,EAAE;MACvD,OAAO;QAAEC,KAAK,EAAE,gBAAgB;QAAEC,IAAI,EAAE;UAAEH;QAAM;MAAE,CAAC;IACrD,CAAC,MAAM;MACL,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC;EAEDC,YAAY,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAO,CACL;MACEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,UAAU;MAChBC,EAAE,EAAE,QAAQ;MACZC,KAAK,EAAE,CACL;QAAEH,MAAM,EAAE,CAAC;QAAEI,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,KAAK;QAAEC,cAAc,EAAE,CAAC,kBAAkB;MAAE,CAAC,EAClF;QAAEN,MAAM,EAAE,CAAC;QAAEI,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAE,KAAK;QAAEC,cAAc,EAAE;MAAG,CAAC,EAC/D;QAAEN,MAAM,EAAE,CAAC;QAAEI,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,KAAK;QAAEC,cAAc,EAAE;MAAG,CAAC,EAChE;QAAEN,MAAM,EAAE,CAAC;QAAEI,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAE,KAAK;QAAEC,cAAc,EAAE,CAAC,gBAAgB;MAAE,CAAC,EAC/E;QAAEN,MAAM,EAAE,EAAE;QAAEI,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAG,CAAC,EAChE;QAAEN,MAAM,EAAE,EAAE;QAAEI,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,cAAc,EAAE,CAAC,kBAAkB,EAAE,gBAAgB;MAAE,CAAC,EACnG;QAAEN,MAAM,EAAE,EAAE;QAAEI,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAG,CAAC,EAChE;QAAEN,MAAM,EAAE,EAAE;QAAEI,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAG,CAAC;IAEnE,CAAC,CACF;EACH;AAIA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}